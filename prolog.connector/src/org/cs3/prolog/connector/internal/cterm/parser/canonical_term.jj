/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. canonical_term.jj */
/*@egen*//*****************************************************************************
 * This file is part of the Prolog Development Tool (PDT)
 * 
 * Author: Lukas Degener (among others) 
 * E-mail: degenerl@cs.uni-bonn.de
 * WWW: http://roots.iai.uni-bonn.de/research/pdt 
 * Copyright (C): 2004-2006, CS Dept. III, University of Bonn
 * 
 * All rights reserved. This program is  made available under the terms 
 * of the Eclipse Public License v1.0 which accompanies this distribution, 
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * In addition, you may at your option use, modify and redistribute any
 * part of this program under the terms of the GNU Lesser General Public
 * License (LGPL), version 2.1 or, at your option, any later version of the
 * same license, as long as
 * 
 * 1) The program part in question does not depend, either directly or
 *   indirectly, on parts of the Eclipse framework and
 *   
 * 2) the program part in question does not include files that contain or
 *   are derived from third-party work and are therefor covered by special
 *   license agreements.
 *   
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *   
 * ad 1: A program part is said to "depend, either directly or indirectly,
 *   on parts of the Eclipse framework", if it cannot be compiled or cannot
 *   be run without the help or presence of some part of the Eclipse
 *   framework. All java classes in packages containing the "pdt" package
 *   fragment in their name fall into this category.
 *   
 * ad 2: "Third-party code" means any code that was originaly written as
 *   part of a project other than the PDT. Files that contain or are based on
 *   such code contain a notice telling you so, and telling you the
 *   particular conditions under which they may be used, modified and/or
 *   distributed.
 ****************************************************************************/

/**
* JJTree file
*/

options {
  JDK_VERSION = "1.6";
  STATIC=false;
                        
                                                  
                    
                                                        
               
             
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  DEBUG_TOKEN_MANAGER=false;  
                       
                    
  LOOKAHEAD=1;
  //OUTPUT_DIRECTORY ="generated";
  //JJTREE_OUTPUT_DIRECTORY ="generated";

  
}
 
PARSER_BEGIN(CanonicalTermParser) 
package org.cs3.pl.cterm.internal.parser;

import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;


public class CanonicalTermParser/*@bgen(jjtree)*/implements CanonicalTermParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCanonicalTermParserState jjtree = new JJTCanonicalTermParserState();

/*@egen*/
	 public static class RuntimeException extends java.lang.RuntimeException{

			private Throwable cause;
			private String message;

			public RuntimeException(Throwable e) {
				this.cause = e;
				message="wrapped exception";
			}

			public RuntimeException(String message,Throwable e) {
				this.cause = e;
				this.message = message;
			}
			
			public Throwable fillInStackTrace() {
				return cause.fillInStackTrace();
			}

			public String getLocalizedMessage() {
				return message + " ("+cause.getLocalizedMessage()+")";
			}

			public String getMessage() {
				return message + " ("+cause.getMessage()+")";
			}

			public void printStackTrace() {
				cause.printStackTrace();
			}

			public void printStackTrace(PrintStream arg0) {
				cause.printStackTrace(arg0);
			}

			public void printStackTrace(PrintWriter arg0) {
				cause.printStackTrace(arg0);
			}

			public String toString() {
				return cause.toString();
			}
	    	
	    }
	
	private List errors = new ArrayList();
	
	public List getErrors() {
		return errors;
	}
	
		void jjtreeOpenNodeScope(Node n)
    {
    	Token t = getToken(1);

      ((SimpleNode)n).jjtSetFirstToken(t);
      
    }

    void jjtreeCloseNodeScope(Node n)
    {
      Token t = getToken(0);
      ((SimpleNode)n).jjtSetLastToken(t);
      
      
	  
	  	//need to "manualy" figure out the start token, as node scope hooks are
		//called "to late" for nodes like ASTInfixTerm 
		//if the nodes children have already been poped, this should work:
		SimpleNode s = (SimpleNode)n;
		if(s.jjtGetNumChildren()>0){
			 SimpleNode firstChild = (SimpleNode)s.jjtGetChild(0);
			 s.jjtSetFirstToken(firstChild.jjtGetFirstToken());
		}
		
		
 	  
	  }

	
	public void error_skipto(int kind) {
	  ParseException e = generateParseException();  
	  errors.add(e);
	  Token t;
	  do {
	    t = getNextToken();
	  } while (t.kind != kind && t.kind != EOF);
	}

public static void main(String args[]) throws FileNotFoundException {
        InputStream stream = null;
        if(args==null||args.length==0){
             stream=System.in;
        }
        else{
                return;
        }
    CanonicalTermParser t = new CanonicalTermParser(stream);
    try {
      t.Term();
      Node n = t.getASTRoot();
      
      System.err.println("Thank you.");
    } catch (Exception e) {
      System.err.println("Oops.");
      System.err.println(e.getMessage());
      e.printStackTrace();
    }
  }
  public Node getASTRoot(){
		return  jjtree.rootNode();
	}
  
}
PARSER_END(CanonicalTermParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


TOKEN : /* SEPARATORS */
{
    < LPAREN: "(" > 
|   < RPAREN: ")" > 
|   < COMMA: "," >
|   < DOT: "." >
|   < LSQB: "[" >
|   < RSQB: "]" >
|	< LBRC:	"{" >
|   < RBRC: "}" > 
|	< CUT: "!" >
}


TOKEN : /* IDENTIFIERS */
{
  < CLAUSE_DEF: "<" "c" "l" "a" "u" "s" "e" ">" >
|  < ATOM_IDENTIFIER: (<LC_LETTER>|<GRAPHIC>) (<LETTER>|<DIGIT>|<GRAPHIC>)* >
| < VARIABLE_IDENTIFIER: <UC_LETTER> (<LETTER>|<DIGIT>)* >
|  < #LETTER: <UC_LETTER>|<LC_LETTER> >
|  < #LC_LETTER: ["a"-"z"]|<UNICODE_LETTER> >
|  < #UNICODE_LETTER:  ["\u00c0" - "\u1fff"]| ["\u3040" - "\ud7ff"]| ["\ue000" - "\uffef"]>
|  < #GRAPHIC : [";","$","#","&","*", "+" ,"-", "." ,"/" ,":" ,"<", "=", ">", "?", "@", "\\", "^", "~"] 
	             |["\u00a1" - "\u00bf"]| [ "\u2010" - "\u303f"] >
|  < #UC_LETTER: ["_","A"-"Z"] >
|  < #DIGIT: ["0"-"9"] >
}

TOKEN : /* LITERALS */
{  
  < DECIMAL_LITERAL: ("0'" (<LETTER>|<DIGIT>|<GRAPHIC>))|(["0"-"9"] (["0"-"9"])*) >
|  < BIN_LITERAL: ["0"-"9"] "b" ["0"-"1"] (["0"-"1"])* >
|  < OCT_LITERAL: ["0"-"9"] "o" ["0"-"7"] (["0"-"7"])* >
|  < HEX_LITERAL: ["0"-"9"] "x" ["0"-"9","A"-"F","a"-"f"] (["0"-"9","A"-"F","a"-"f"])* >
|  < FLOATING_POINT_LITERAL:
       	(["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? 
      | (["0"-"9"])+ <EXPONENT> 
      | (["0"-"9"])+ (<EXPONENT>)? 
  >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < QUOTED_ATOM:
      "'"
      (   (~["\'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            )
          )
        | ("''")
      )*
      "'" 
  >
| < QUOTED_STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            )
          )
        | ("''")
      )*
      "\"" 
  >
}

TOKEN : /* REFERENCES */
	{< CLAUSE_REFERENCE: (<UC_LETTER>|<DIGIT>) (<UC_LETTER>|<DIGIT>)* >}
	
void Start()     :{}
{
	Term()
	< EOF >
}

void Term()     :{}
{
	LOOKAHEAD("(") "(" Term() ")"
	|LOOKAHEAD(<CLAUSE_DEF> "(") Atom()
	|LOOKAHEAD(Atom() "(") Compound()
	|String()
	|Atom()
	|Number()	
	|Nil()
	|Variable()
	
}

void ClauseSyntax()       :{}
{
	<CLAUSE_DEF>
	<LPAREN>
	<CLAUSE_REFERENCE>
	<RPAREN>
} 

void Atom():{/*@bgen(jjtree) Atom */
  ASTAtom jjtn000 = new ASTAtom(this, JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Atom */
        try {
/*@egen*/
	ClauseSyntax()
	|<ATOM_IDENTIFIER>
	|<QUOTED_ATOM>
	|<CUT>
	|<LBRC><RBRC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Nil():{/*@bgen(jjtree) Nil */
  ASTNil jjtn000 = new ASTNil(this, JJTNIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Nil */
        try {
/*@egen*/
	<LSQB><RSQB>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Variable():{/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(this, JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	<VARIABLE_IDENTIFIER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void Compound():{/*@bgen(jjtree) Compound */
  ASTCompound jjtn000 = new ASTCompound(this, JJTCOMPOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Compound */
        try {
/*@egen*/
	Atom()
	<LPAREN>
	Term()
	(		
		<COMMA>
		Term()
	)*
	<RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Number()      :{}
{
	Integer()|Float()
}

void Integer() : {/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(this, JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  <DECIMAL_LITERAL>|<BIN_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*//*|<OCT_LITERAL>|<HEX_LITERAL>*/
}

void Float() :{/*@bgen(jjtree) Float */
  ASTFloat jjtn000 = new ASTFloat(this, JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Float */
        try {
/*@egen*/
	<FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void String() :{/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(this, JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	<QUOTED_STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}